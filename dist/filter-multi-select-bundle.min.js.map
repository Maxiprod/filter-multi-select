{"version":3,"file":"filter-multi-select-bundle.js","sources":["../src/FilterMultiSelect.ts","../src/filter-multi-select.ts"],"names":["this","documentKeydownListener","e","stopPropagation","focusItem","_this","refocusFilter","documentClickListener","div","target","contains","closeDropdown","fmsFocusListener","viewBar","dispatchEvent","MouseEvent","t","selectTarget","get","HTMLSelectElement","Error","select","multiple","name","options","FilterMultiSelect","createOptions","array","args","items","document","createElement","type","filterText","append","selectAllOption","getListItem","forEach","o","dropDown","placeholder","textContent","placeholderText","caseSensitive","itemFocus","SingleOption","fms","i","label","value","defaultSelected","disabled","j","htmlOptions","length","jsoptions","jsOptions","map","selected","checkValue","opts","htmloptions","concat","v","getValue","getLabel","class_2","_super","call","prototype","markSelectAll","checkbox","indeterminate","markSelectAllNotDisabled","filter","isDisabled","filterInput","className","attachDropdownListeners","log","m","stopImmediatePropagation","updateDropdownList","isSelected","clearFilterAndRefocus","text","showing","Array","focusable","indexOf","show","push","removeEventListener","classList","remove","addEventListener","fmsMousedownListener","incrementItemFocus","decrementItemFocus","focus","openDropdown","option","areAllSelected","hidden","areAllDisabled","disable","reduce","acc","cur","areSomeSelected","getOption","deselect","enable","isEnablingAndDisablingPermitted","disableNoPermissionCheck","row","toString","nchbx","id","checked","htmlFor","labelFor","innerHTML","closeButton","selectNoDisabledCheck","tabIndex","queueOption","update","unqueueOption","class_3","selectedItemBadge","add","$__default","extend","fn","filterMultiSelect","selectAllText","allowEnablingAndDisabling","initialize","getRootElement","methods","deselectAll","getSelectedOptionsAsJson","includeDisabled"],"mappings":"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","sourcesContent":["import $, { map } from 'jquery';\nimport Option from './Option';\n\nconst NULL_OPTION = new class implements Option {\n    public initialize(): void {}\n    public select(): void {}\n    public deselect(): void {}\n    public enable(): void {}\n    public disable(): void {}\n    public isSelected(): boolean {return false;}\n    public isDisabled(): boolean {return false;}\n    public getListItem(): HTMLElement {return document.createElement('div');}\n    public getSelectedItemBadge(): HTMLElement {return document.createElement('div');}\n    public getLabel(): string {return 'NULL_OPTION'}\n    public getValue(): string {return 'NULL_OPTION'}\n    public show(): void {}\n    public hide(): void {}\n    public isHidden(): boolean {return false;}\n    public focus(): void {}\n}  \n\nconst DEBUG = false;\n\nexport default class FilterMultiSelect {\n\n    private static SingleOption = class implements Option {\n        protected div: HTMLDivElement;\n        protected checkbox: HTMLInputElement;\n        protected labelFor: HTMLLabelElement;\n        protected closeButton: HTMLButtonElement;\n        protected selectedItemBadge: HTMLSpanElement;\n        protected fms: FilterMultiSelect;\n    \n        constructor(fms: FilterMultiSelect, row: number, name:string, label: string, value: string, checked: boolean, disabled: boolean) {\n            this.fms = fms;\n            this.div = document.createElement('div');\n            this.checkbox = document.createElement('input');\n            this.checkbox.type = 'checkbox';\n            let id: string = name + '-' + row.toString();\n            let nchbx: string = id + '-chbx';\n            this.checkbox.id = nchbx;\n            this.checkbox.name = name;\n            this.checkbox.value = value;\n            this.checkbox.checked = checked;\n            this.checkbox.disabled = disabled;\n            this.labelFor = document.createElement('label');\n            this.labelFor.htmlFor = nchbx;\n            this.labelFor.textContent = label;\n            this.div.append(this.checkbox, this.labelFor);\n            this.closeButton = document.createElement('button');\n            this.closeButton.type = 'button';\n            this.closeButton.innerHTML = '&times;';\n            this.selectedItemBadge = document.createElement('span');\n            this.selectedItemBadge.setAttribute('data-id',id);\n            this.selectedItemBadge.textContent = label;\n            this.selectedItemBadge.append(this.closeButton);\n        }\n    \n        private log(m: string, e: Event):void {\n            if (DEBUG) {\n                console.log(e.timeStamp + \" - \" + m + \":\" + e.type + \":\" + e.target)\n            }\n        }\n    \n        public initialize(): void {\n            this.div.className = 'dropdown-item custom-control';\n            this.checkbox.className = 'custom-control-input custom-checkbox';\n            this.labelFor.className = 'custom-control-label';\n            this.selectedItemBadge.className = 'item';\n            if (this.isSelected()) {\n                this.selectNoDisabledCheck();\n            }\n            if (this.isDisabled()) {\n                this.disableNoPermissionCheck();\n            }\n            this.checkbox.addEventListener('change', (e: Event) => {\n                e.stopPropagation();\n                if (this.isDisabled() || this.fms.isDisabled()) {\n                    e.preventDefault();\n                    return;\n                }\n                if (DEBUG) {\n                    this.log('checkbox',e);\n                }\n                \n                if (this.isSelected()) {\n                    this.select();\n                } else {\n                    this.deselect();\n                }\n                let numShown = this.fms.showing.length;\n                if (numShown === 1) {\n                    this.fms.clearFilterAndRefocus();\n                }\n            }, true);\n            this.checkbox.addEventListener('keyup', (e: KeyboardEvent) => {\n                if (DEBUG) {\n                    this.log('checkbox',e);\n                }\n                switch (e.key) {\n                    case \"Enter\":\n                        e.stopPropagation();\n                        this.checkbox.dispatchEvent(new MouseEvent('click'));\n                        break;\n                    default:\n                        break;\n                }\n            }, true)\n            this.closeButton.addEventListener('click', (e: Event) => {\n                e.stopPropagation();\n                if (this.isDisabled() || this.fms.isDisabled()) return;\n                if (DEBUG) {\n                    this.log('closeButton',e);\n                }\n                this.deselect();\n                if (!this.fms.isClosed()) {\n                    this.fms.refocusFilter();\n                }\n            }, true);\n            this.checkbox.tabIndex = -1;\n            this.closeButton.tabIndex = -1;\n        }\n    \n        public select(): void {\n            if (this.isDisabled()) return;\n            this.selectNoDisabledCheck();\n        }\n\n        private selectNoDisabledCheck(): void {\n            this.checkbox.checked = true;\n            this.fms.queueOption(this);\n            this.fms.update();\n        }\n    \n        public deselect(): void {\n            if (this.isDisabled()) return;\n            this.checkbox.checked = false;\n            this.fms.unqueueOption(this);\n            this.fms.update();\n        }\n    \n        public enable(): void {\n            if (!this.fms.isEnablingAndDisablingPermitted()) return;\n            this.checkbox.disabled = false;\n            this.selectedItemBadge.classList.remove('disabled');\n            this.fms.update();\n        }\n    \n        public disable(): void {\n            if (!this.fms.isEnablingAndDisablingPermitted()) return;\n            this.disableNoPermissionCheck();\n        }\n\n        private disableNoPermissionCheck(): void {\n            this.checkbox.disabled = true;\n            this.selectedItemBadge.classList.add('disabled');\n            this.fms.update();\n        }\n    \n        public isSelected(): boolean {\n            return this.checkbox.checked;\n        }\n    \n        public isDisabled(): boolean {\n            return this.checkbox.disabled;\n        }\n    \n        public getListItem(): HTMLElement {\n            return this.div;\n        }\n    \n        public getSelectedItemBadge(): HTMLElement {\n            return this.selectedItemBadge;\n        }\n    \n        public getLabel(): string {\n            return this.labelFor.textContent;\n        }\n    \n        public getValue(): string {\n            return this.checkbox.value;\n        }\n    \n        public show(): void {\n            this.div.hidden = false;\n        }\n    \n        public hide(): void {\n            this.div.hidden = true;\n        }\n    \n        public isHidden(): boolean {\n            return this.div.hidden;\n        }\n\n        public focus(): void {\n            this.labelFor.focus();\n        }\n    }\n\n    private static createOptions(fms: FilterMultiSelect, name: string, htmlOptions: Array<HTMLOptionElement>, jsOptions: Array<[label:string, value:string, selected?:boolean, disabled?:boolean]>): Array<Option> {\n        let htmloptions =  htmlOptions.map((o, i) => {\n            FilterMultiSelect.checkValue(o.value, o.label);\n            return new FilterMultiSelect.SingleOption(fms, i, name, o.label, o.value, o.defaultSelected, o.disabled);\n        });\n        let j = htmlOptions.length;\n        let jsoptions = jsOptions.map((o, i) => {\n            let label: string = o[0];\n            let value: string = o[1];\n            let selected: boolean = o[2];\n            let disabled: boolean = o[3];\n            FilterMultiSelect.checkValue(value, label);\n            return new FilterMultiSelect.SingleOption(fms, j+i, name, label, value, selected, disabled);\n\n        });\n        let opts = htmloptions.concat(jsoptions);\n        let counts: any = {};\n        opts.forEach((o) => {\n            let v: string = o.getValue();\n            if (counts[v] === undefined) {\n                counts[v] = 1;\n            } else {\n                throw new Error(\"Duplicate value: \" + o.getValue() + \" (\" + o.getLabel() + \")\");\n            }\n        });\n        return opts;\n    }\n\n    private static checkValue(value:string, label:string):void {\n        if (value === \"\") {\n            throw new Error(\"Option \" + label + \" does not have an associated value.\");\n        }\n    }\n\n    private static createSelectAllOption(fms: FilterMultiSelect, name: string, label: string) {\n        return new class extends FilterMultiSelect.SingleOption {\n            constructor() {\n                super(fms,-1,name,label,'',false,false); //magic number\n                this.checkbox.indeterminate = false;\n            }\n\n            markSelectAll(): void {\n                this.checkbox.checked = true;\n                this.checkbox.indeterminate = false;\n            }\n\n            markSelectPartial(): void {\n                this.checkbox.checked = false;\n                this.checkbox.indeterminate = true;\n            }\n\n            markSelectAllNotDisabled(): void {\n                this.checkbox.checked = true;\n                this.checkbox.indeterminate = true;\n            }\n\n            markDeselect(): void {\n                this.checkbox.checked = false;\n                this.checkbox.indeterminate = false;\n            }\n\n            public select(): void {\n                if (this.isDisabled()) return;\n                this.fms.options.filter((o) => !o.isSelected())\n                    .forEach((o) => o.select());\n            }\n        \n            public deselect(): void {\n                if (this.isDisabled()) return;\n                this.fms.options.filter((o) => o.isSelected())\n                    .forEach((o) => o.deselect());\n            }\n\n            public enable(): void {\n                this.checkbox.disabled = false;\n            }\n        \n            public disable(): void {\n                this.checkbox.disabled = true;\n            }\n        } ();\n    }\n\n    private options: Array<Option>;\n    private selectAllOption;\n    private div: HTMLDivElement;\n    private viewBar: HTMLDivElement;\n    private placeholder: HTMLSpanElement;\n    private selectedItems: HTMLSpanElement;\n    private dropDown: HTMLDivElement;\n    private filter: HTMLDivElement;\n    private filterInput: HTMLInputElement;\n    private clearButton: HTMLButtonElement;\n    private items: HTMLDivElement;\n    private caseSensitive: boolean;\n    private disabled: boolean;\n    private allowEnablingAndDisabling: boolean;\n    private filterText: string;\n    private showing: Array<number>;\n    private focusable: Array<number>;\n    private itemFocus: number;\n    private name: string;\n\n    constructor (selectTarget: JQuery<HTMLElement>, args: Args) {\n        let t = selectTarget.get(0);\n        if (!(t instanceof HTMLSelectElement)) {\n            throw new Error(\"JQuery target must be a select element.\");\n        }\n        let select: HTMLSelectElement = t;\n        let multiple: boolean = select.multiple;\n        if (!multiple) {\n            throw new Error(\"Select element must have the \\\"multiple\\\" attribute.\")\n        }\n        let name: string = select.name;\n        if (!name) {\n            throw new Error(\"Select element must have a name attribute.\");\n        }\n        this.name = name;\n        let array: Array<HTMLOptionElement> = selectTarget.find('option').toArray();\n        this.options = FilterMultiSelect.createOptions(this, name, array, args.items);\n        this.selectAllOption = FilterMultiSelect.createSelectAllOption(this, name, args.selectAllText);\n\n        // filter box\n        this.filterInput = document.createElement('input');\n        this.filterInput.type = 'text';\n        this.filterInput.placeholder = args.filterText;\n        this.clearButton = document.createElement('button');\n        this.clearButton.type = 'button';\n        this.clearButton.innerHTML = '&times;';\n        this.filter = document.createElement('div');\n        this.filter.append(this.filterInput, this.clearButton);\n        \n        // items\n        this.items = document.createElement('div');\n        this.items.append(this.selectAllOption.getListItem());\n        this.options.forEach((o: Option) => this.items.append(o.getListItem()));\n\n        // dropdown list\n        this.dropDown = document.createElement('div');\n        this.dropDown.append(this.filter, this.items);\n\n        // placeholder\n        this.placeholder = document.createElement('span');\n        this.placeholder.textContent = args.placeholderText;\n        this.selectedItems = document.createElement('span');\n        \n        // viewbar\n        this.viewBar = document.createElement('div');\n        this.viewBar.append(this.placeholder, this.selectedItems);\n\n        this.div = document.createElement('div');\n        this.div.id = select.id;\n        this.div.append(this.viewBar, this.dropDown);\n\n        this.caseSensitive = args.caseSensitive;\n        this.disabled = select.disabled;\n        this.allowEnablingAndDisabling = args.allowEnablingAndDisabling;\n        this.filterText = '';\n        this.showing = new Array<number>();\n        this.focusable = new Array<number>();\n        this.itemFocus = -2; //magic number\n    }\n\n    public initialize(): void {\n        this.options.forEach(o => o.initialize());\n        this.selectAllOption.initialize();\n        \n        this.filterInput.className = 'form-control';\n        this.clearButton.tabIndex = -1;\n\n        this.filter.className = 'filter dropdown-item'\n        this.items.className = 'items dropdown-item';\n        this.dropDown.className = 'dropdown-menu';\n\n        this.placeholder.className = 'placeholder';\n        this.selectedItems.className = 'selected-items';\n        this.viewBar.className = 'viewbar form-control dropdown-toggle';\n\n        this.div.className = 'filter-multi-select dropdown';\n\n        if (this.isDisabled()) {\n            this.disableNoPermissionCheck();\n        }\n\n        this.attachDropdownListeners();\n        this.attachViewbarListeners();\n        this.closeDropdown();\n    }\n\n    private log(m: string, e: Event):void {\n        if (DEBUG) {\n            console.log(e.timeStamp + \" - \" + m + \":\" + e.type + \":\" + e.target);\n        }\n    }\n\n    private attachDropdownListeners(): void {\n        this.filterInput.addEventListener('keyup',(e: KeyboardEvent) => {\n            if (DEBUG) {\n                this.log('filterInput',e);\n            }\n            e.stopImmediatePropagation();\n            this.updateDropdownList();\n            let numShown = this.showing.length;\n            switch(e.key) {\n                case \"Enter\":\n                    if (numShown === 1) {\n                        let o: Option = this.options[this.showing[0]]; //magic number\n                        if (!o.isDisabled()) {\n                            if (o.isSelected()) {\n                                o.deselect();\n                            } else {\n                                o.select();\n                            }\n                            this.clearFilterAndRefocus();\n                        }\n                    }\n                    break;\n                case \"Escape\":\n                    if (this.filterText.length > 0) {\n                        this.clearFilterAndRefocus();\n                    } else {\n                        this.closeDropdown();\n                    }\n                    break;\n                default:\n                    break;\n            }   \n        }, true);\n        this.clearButton.addEventListener('click', (e: MouseEvent) => {\n            if (DEBUG) {\n                this.log('clearButton',e);\n            }\n            e.stopImmediatePropagation();\n            let text = this.filterInput.value;\n            if (text.length > 0) {\n                this.clearFilterAndRefocus();\n            } else {\n                this.closeDropdown();\n            }\n        }, true);\n    }\n\n    private updateDropdownList(): void {\n        let text = this.filterInput.value;\n        if (text.length > 0) {\n            this.selectAllOption.hide();\n        } else {\n            this.selectAllOption.show();\n        }\n        let showing = new Array<number>();\n        let focusable = new Array<number>();\n        if (this.caseSensitive) {\n            this.options.forEach((o: Option, i: number) => {\n                if (o.getLabel().indexOf(text) !== -1) { //magic number\n                    o.show();\n                    showing.push(i);\n                    if (!o.isDisabled()) {\n                        focusable.push(i);\n                    }\n                } else {\n                    o.hide();\n                }\n            });\n        } else {\n            this.options.forEach((o: Option, i: number) => {\n                if (o.getLabel().toLowerCase().indexOf(text.toLowerCase()) !== -1 ) { //magic number \n                    o.show();\n                    showing.push(i);\n                    if (!o.isDisabled()) {\n                        focusable.push(i);\n                    }\n                } else {\n                    o.hide();\n                }\n            });\n        }\n        this.filterText = text;\n        this.showing = showing;\n        this.focusable = focusable;\n    }\n\n    private clearFilterAndRefocus(): void {\n        if (DEBUG) {\n            console.log('clear filter');\n        }\n        this.filterInput.value = '';\n        this.updateDropdownList();\n        this.refocusFilter();\n    }\n\n    private refocusFilter() {\n        if (DEBUG) {\n            console.log('refocus filter');\n        }\n        this.filterInput.focus();\n        this.itemFocus = -2; //magic number\n    }\n\n    private attachViewbarListeners(): void {\n        this.viewBar.addEventListener('click',(e) => {\n            if (DEBUG) {\n                this.log('viewBar',e);\n            }\n            if (this.isClosed()) {\n                this.openDropdown();\n            } else {\n                this.closeDropdown();\n            }\n        });\n    }\n\n    public isClosed(): boolean {\n        return !this.dropDown.classList.contains('show');\n    }\n\n    private setTabIndex(): void {\n        if (this.isDisabled()) {\n            this.div.tabIndex = -1;\n        } else {\n            if (this.isClosed()) {\n                this.div.tabIndex = 0;\n            } else {\n                this.div.tabIndex = -1;\n            }\n        }\n    }\n\n    private closeDropdown(): void {\n        if (DEBUG) {\n            console.log('close');\n        }\n        document.removeEventListener('keydown', this.documentKeydownListener, true);\n        document.removeEventListener('click', this.documentClickListener, true);\n        this.dropDown.classList.remove('show');\n        setTimeout(() => {\n            this.setTabIndex();    \n        }, 100); //magic number\n        this.div.addEventListener('mousedown', this.fmsMousedownListener, true);\n        this.div.addEventListener('focus', this.fmsFocusListener);\n    }\n\n    private documentKeydownListener = (e: KeyboardEvent) => {\n        if (DEBUG) {\n            this.log('document',e);\n            console.log(e.key);\n        }\n        switch(e.key) {\n            case \"Tab\":\n                e.stopPropagation();\n                this.closeDropdown();\n                break;\n            case \"ArrowUp\":\n                e.stopPropagation();\n                e.preventDefault();\n                if (DEBUG) {\n                    console.log(\"up\");\n                }\n                this.decrementItemFocus();\n                this.focusItem();\n                break;\n            case \"ArrowDown\":\n                e.stopPropagation();\n                e.preventDefault();\n                if (DEBUG) {\n                    console.log(\"down\");\n                }\n                this.incrementItemFocus();\n                this.focusItem();\n                break;\n            case \"Enter\":\n            case \"Spacebar\":\n            case \" \":\n                //swallow to allow checkbox change to work\n                break;\n            default:\n                //send key to filter\n                this.refocusFilter();\n                break;\n        }\n    };\n\n    private incrementItemFocus(): void {\n        if (this.itemFocus >= this.focusable.length - 1 || this.focusable.length == 0) return;\n        this.itemFocus++;\n        if (this.itemFocus == -1 && this.selectAllOption.isHidden()) { //magic number\n            this.itemFocus++;\n        }\n    }\n\n    private decrementItemFocus(): void {\n        if (this.itemFocus <= -2) return; //magic number\n        this.itemFocus--;\n        if (this.itemFocus == -1 && this.selectAllOption.isHidden()) { //magic number\n            this.itemFocus--;\n        }\n    }\n\n    private focusItem(): void {\n        if (this.itemFocus === -2) {\n            this.refocusFilter();\n        } else if (this.itemFocus === -1) {\n            this.selectAllOption.focus();\n        } else {\n            this.options[this.focusable[this.itemFocus]].focus();\n        }\n    }\n\n    private documentClickListener = (e: MouseEvent) => {\n        if (DEBUG) {\n            this.log('document',e);\n        }\n        if (this.div !== e.target && !this.div.contains(<Node>e.target)) {\n            this.closeDropdown();\n        }\n    };\n\n    private fmsFocusListener: EventListener = (e: FocusEvent) => {\n        if (DEBUG) {\n            this.log('div',e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n        this.viewBar.dispatchEvent(new MouseEvent('click'));\n    };\n\n    private fmsMousedownListener: EventListener = (e: MouseEvent) => {\n        if (DEBUG) {\n            this.log('div',e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    private openDropdown() {\n        if (this.disabled) return;\n        if (DEBUG) {\n            console.log('open');\n        }\n        this.div.removeEventListener('mousedown', this.fmsMousedownListener, true);\n        this.div.removeEventListener('focus', this.fmsFocusListener);\n        this.dropDown.classList.add('show');\n        this.setTabIndex();\n        this.clearFilterAndRefocus();\n        document.addEventListener('keydown', this.documentKeydownListener, true);\n        document.addEventListener('click', this.documentClickListener, true);\n    }\n\n    private queueOption(option: Option): void {\n        if (this.options.indexOf(option) == -1) return;\n        $(this.selectedItems).append(option.getSelectedItemBadge());\n    }\n\n    private unqueueOption(option: Option): void {\n        if (this.options.indexOf(option) == -1) return;\n        $(this.selectedItems).children('[data-id=\"' + option.getSelectedItemBadge().getAttribute('data-id') + '\"]').remove();\n    }\n\n    private update(): void {\n        if (this.areAllSelected()) {\n            this.selectAllOption.markSelectAll();\n            this.placeholder.hidden = true;\n        } else if (this.areSomeSelected()) {\n            if (this.areOnlyDeselectedAlsoDisabled()) {\n                this.selectAllOption.markSelectAllNotDisabled();\n                this.placeholder.hidden = true;\n            } else {\n                this.selectAllOption.markSelectPartial();\n                this.placeholder.hidden = true;\n            }\n        } else {\n            this.selectAllOption.markDeselect();\n            this.placeholder.hidden = false;\n        }\n        if (this.areAllDisabled()) {\n            this.selectAllOption.disable();\n        } else {\n            this.selectAllOption.enable();\n        }\n    }\n\n    private areAllSelected(): boolean {\n        return this.options\n                .map((o) => o.isSelected())\n                .reduce((acc,cur) => acc && cur, true);\n    }\n\n    private areSomeSelected(): boolean {\n        return this.options\n                .map((o) => o.isSelected())\n                .reduce((acc,cur) => acc || cur, false);\n    }\n\n    private areOnlyDeselectedAlsoDisabled(): boolean {\n        return this.options\n                .filter((o) => !o.isSelected())\n                .map((o) => o.isDisabled())\n                .reduce((acc,cur) => acc && cur, true);\n    }\n\n    private areAllDisabled(): boolean {\n        return this.options\n                .map((o) => o.isDisabled())\n                .reduce((acc,cur) => acc && cur, true);\n    }\n\n    private isEnablingAndDisablingPermitted(): boolean {\n        return this.allowEnablingAndDisabling;\n    }\n\n    public getRootElement(): HTMLElement {\n        return this.div;\n    }\n\n    public hasOption(value: string): boolean {\n        return this.getOption(value) !== NULL_OPTION;\n    }\n\n    private getOption(value: string): Option {\n        for (const o of this.options) {\n            if (o.getValue() == value) {\n                return o;\n            }\n        }\n        return NULL_OPTION;\n    }\n\n    public selectOption(value: string): void {\n        this.getOption(value).select();\n    }\n\n    public deselectOption(value: string): void {\n        this.getOption(value).deselect();\n    }\n\n    public isOptionSelected(value: string): boolean {\n        return this.getOption(value).isSelected();\n    }\n\n    public enableOption(value: string): void {\n        this.getOption(value).enable();\n    }\n\n    public disableOption(value: string): void {\n        this.getOption(value).disable();\n    }\n\n    public isOptionDisabled(value: string): boolean {\n        return this.getOption(value).isDisabled();\n    }\n\n    public disable(): void {\n        if (!this.isEnablingAndDisablingPermitted()) return;\n        this.disableNoPermissionCheck();\n    }\n\n    private disableNoPermissionCheck(): void {\n        this.options.forEach((o) => this.setBadgeDisabled(o));\n        this.disabled = true;\n        this.div.classList.add('disabled');\n        this.viewBar.classList.remove('dropdown-toggle');\n        this.closeDropdown();\n    }\n\n    private setBadgeDisabled(o: Option):void {\n        o.getSelectedItemBadge().classList.add('disabled');\n    }\n\n    public enable(): void {\n        if (!this.isEnablingAndDisablingPermitted()) return;\n        this.options.forEach((o) => {\n            if (!o.isDisabled()) {\n                this.setBadgeEnabled(o);\n            }\n        });\n        this.disabled = false;\n        this.div.classList.remove('disabled');\n        this.setTabIndex(); \n        this.viewBar.classList.add('dropdown-toggle');\n    }\n\n    private setBadgeEnabled(o: Option):void {\n        o.getSelectedItemBadge().classList.remove('disabled');\n    }\n\n    public isDisabled(): boolean {\n        return this.disabled;\n    }\n\n    public selectAll(): void {\n        this.selectAllOption.select();\n    }\n\n    public deselectAll(): void {\n        this.selectAllOption.deselect();\n    }\n\n    private getSelectedOptions(includeDisabled = true): Array<Option> {\n        let a = this.options;\n        if (!includeDisabled) {\n            if (this.isDisabled()) {\n                return new Array();\n            }\n            a = a.filter((o) => !o.isDisabled());\n        }\n        a = a.filter((o) => o.isSelected());\n        return a;\n    }\n\n    public getSelectedOptionsAsJson(includeDisabled = true): string {\n        const data: any = {};\n        let a: Array<string> = this.getSelectedOptions(includeDisabled).map((o) => o.getValue());\n        data[this.getName()] = a;\n        let c = JSON.stringify(data, null, \"  \");\n        if (DEBUG) {\n            console.log(c);\n        }\n        return c;\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n}","import $ from 'jquery';\nimport FilterMultiSelect from './FilterMultiSelect';\nimport Option from './Option';\n\n// define the plugin function on the jQuery extension point.\n// ($.fn as any).filterMultiSelect = function (this: JQuery, args: Args): JQuery<HTMLElement> {\n($.fn as any).filterMultiSelect = function (this: JQuery, args: Args): any {\n    let target = this;\n    // merge the global options with the per-call options.\n    args = $.extend({}, ($.fn as any).filterMultiSelect.args, args);\n\n    // factory defaults\n    if (typeof args.placeholderText === 'undefined') args.placeholderText = 'nothing selected';\n    if (typeof args.filterText === 'undefined') args.filterText = 'Filter';\n    if (typeof args.selectAllText === 'undefined') args.selectAllText = 'Select All';\n    if (typeof args.caseSensitive === 'undefined') args.caseSensitive = false;\n    if (typeof args.allowEnablingAndDisabling === 'undefined') args.allowEnablingAndDisabling = true;\n    if (typeof args.items === 'undefined') args.items = new Array();\n\n    let filterMultiSelect = new FilterMultiSelect(target, args);\n    filterMultiSelect.initialize();\n  \n    const fms = $(filterMultiSelect.getRootElement());\n    target.replaceWith(fms);\n    \n    var methods = {\n        hasOption: function(value: string):boolean {\n            return filterMultiSelect.hasOption(value);\n        },\n        selectOption: function(value: string):void {\n            filterMultiSelect.selectOption(value);\n        },\n        deselectOption: function(value: string):void {\n            filterMultiSelect.deselectOption(value);\n        },\n        isOptionSelected: function(value: string):boolean {\n            return filterMultiSelect.isOptionSelected(value);\n        },\n        enableOption: function(value: string):void {\n            filterMultiSelect.enableOption(value);\n        },\n        disableOption: function(value: string):void {\n            filterMultiSelect.disableOption(value);\n        },\n        isOptionDisabled: function(value: string):boolean {\n            return filterMultiSelect.isOptionDisabled(value);\n        },\n        enable: function():void {\n            filterMultiSelect.enable();\n        },\n        disable: function():void {\n            filterMultiSelect.disable();\n        },\n        selectAll: function():void {\n            filterMultiSelect.selectAll();\n        },\n        deselectAll: function():void {\n            filterMultiSelect.deselectAll();\n        },\n        getSelectedOptionsAsJson: function(includeDisabled = true):string {\n            return filterMultiSelect.getSelectedOptionsAsJson(includeDisabled);\n        }\n    };\n    return methods;\n};\n\n// define the plugin's global default options.\n($.fn as any).filterMultiSelect.args = {};"]}